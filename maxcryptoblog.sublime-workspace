{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 4629 files for \"lineno\" (regex, case sensitive)\n\n/root/maxcryptoblog/maxcryptoblog.sublime-workspace:\n  310: 			\"lineno\",\n\n/root/maxcryptoblog/allauthdemo/settings.py:\n   43:     print(allauthdemo.utils.module_path(), 'line', allauthdemo.utils.lineno(), 'settings_local imported')\n   50:     print(allauthdemo.utils.module_path(), 'line', allauthdemo.utils.lineno(), 'DEBUG =', DEBUG)\n   52:     print(allauthdemo.utils.module_path(), 'line', allauthdemo.utils.lineno(), 'DEBUG is not defined')\n\n/root/maxcryptoblog/allauthdemo/settings_cryptoblog.py:\n   14:     print(allauthdemo.utils.module_path(), 'line', allauthdemo.utils.lineno(), 'loaded settings_cryptoblog')\n   16:     print(allauthdemo.utils.module_path(), 'line', allauthdemo.utils.lineno(), 'error')\n\n/root/maxcryptoblog/allauthdemo/utils.py:\n   31: def lineno():\n   36:     return inspect.currentframe().f_back.f_lineno\n\n/root/maxcryptoblog/blog/encryption.py:\n   25: def lineno():\n   30:     return inspect.currentframe().f_back.f_lineno\n   35:         print(lineno(), 'salt =', salt, 'type(salt) =', type(salt), 'len(salt) =', len(salt))\n   38:         print(lineno(), 'salt_list =', salt_list, 'len(salt_list) =', len(salt_list))\n   61:         print(lineno(), 'token = ', token)\n   63:         print(lineno(), 'f.decrypt(token)=', f.decrypt(token))\n   69:         print(lineno(), 'salt =', salt, 'type(salt) =', type(salt), 'len(salt) =', len(salt))\n   72:         print(lineno(), 'salt_list =', salt_list, 'len(salt_list) =', len(salt_list))\n   97:         print(lineno(), 'plaintext =', plaintext)\n  105:         print(lineno(), 'args =', args)\n  118:     print(lineno(), 'password =', password, 'plaintext =', plaintext)\n  120:     print(lineno(), 'ciphertext =', ciphertext)\n  122:     print(lineno(), 'recovered plaintext =', plaintext)\n\n/root/maxcryptoblog/blog/views.py:\n   10: def lineno():\n   12:     lineno() is a function to make it easy to grab the line\n   14:     return inspect.currentframe().f_back.f_lineno\n   34:     print(lineno(), 'request.method =', request.method)\n   50:     print(lineno(), 'request.method =', request.method)\n   68:     print(lineno(), 'request.user =', request.user)\n   97:     print(lineno(), 'request.method =', request.method)\n  118:     print(lineno(), 'request.method =', request.method)\n\n/root/maxcryptoblog/myvenv/include/python3.4m/Python-ast.h:\n  176:     int lineno;\n  319:     int lineno;\n  361:     int lineno;\n  377:     int lineno;\n  407:                         asdl_seq * decorator_list, expr_ty returns, int lineno,\n  412:                      asdl_seq * decorator_list, int lineno, int col_offset,\n  415: stmt_ty _Py_Return(expr_ty value, int lineno, int col_offset, PyArena *arena);\n  417: stmt_ty _Py_Delete(asdl_seq * targets, int lineno, int col_offset, PyArena\n  420: stmt_ty _Py_Assign(asdl_seq * targets, expr_ty value, int lineno, int\n  424:                       lineno, int col_offset, PyArena *arena);\n  427:                 orelse, int lineno, int col_offset, PyArena *arena);\n  429: stmt_ty _Py_While(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,\n  432: stmt_ty _Py_If(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,\n  435: stmt_ty _Py_With(asdl_seq * items, asdl_seq * body, int lineno, int col_offset,\n  438: stmt_ty _Py_Raise(expr_ty exc, expr_ty cause, int lineno, int col_offset,\n  442:                 asdl_seq * finalbody, int lineno, int col_offset, PyArena\n  445: stmt_ty _Py_Assert(expr_ty test, expr_ty msg, int lineno, int col_offset,\n  448: stmt_ty _Py_Import(asdl_seq * names, int lineno, int col_offset, PyArena\n  452:                        lineno, int col_offset, PyArena *arena);\n  454: stmt_ty _Py_Global(asdl_seq * names, int lineno, int col_offset, PyArena\n  457: stmt_ty _Py_Nonlocal(asdl_seq * names, int lineno, int col_offset, PyArena\n  460: stmt_ty _Py_Expr(expr_ty value, int lineno, int col_offset, PyArena *arena);\n  462: stmt_ty _Py_Pass(int lineno, int col_offset, PyArena *arena);\n  464: stmt_ty _Py_Break(int lineno, int col_offset, PyArena *arena);\n  466: stmt_ty _Py_Continue(int lineno, int col_offset, PyArena *arena);\n  468: expr_ty _Py_BoolOp(boolop_ty op, asdl_seq * values, int lineno, int col_offset,\n  471: expr_ty _Py_BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno, int\n  474: expr_ty _Py_UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int col_offset,\n  477: expr_ty _Py_Lambda(arguments_ty args, expr_ty body, int lineno, int col_offset,\n  480: expr_ty _Py_IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno, int\n  483: expr_ty _Py_Dict(asdl_seq * keys, asdl_seq * values, int lineno, int\n  486: expr_ty _Py_Set(asdl_seq * elts, int lineno, int col_offset, PyArena *arena);\n  488: expr_ty _Py_ListComp(expr_ty elt, asdl_seq * generators, int lineno, int\n  491: expr_ty _Py_SetComp(expr_ty elt, asdl_seq * generators, int lineno, int\n  495:                      lineno, int col_offset, PyArena *arena);\n  497: expr_ty _Py_GeneratorExp(expr_ty elt, asdl_seq * generators, int lineno, int\n  500: expr_ty _Py_Yield(expr_ty value, int lineno, int col_offset, PyArena *arena);\n  502: expr_ty _Py_YieldFrom(expr_ty value, int lineno, int col_offset, PyArena\n  506:                     int lineno, int col_offset, PyArena *arena);\n  509:                  starargs, expr_ty kwargs, int lineno, int col_offset, PyArena\n  512: expr_ty _Py_Num(object n, int lineno, int col_offset, PyArena *arena);\n  514: expr_ty _Py_Str(string s, int lineno, int col_offset, PyArena *arena);\n  516: expr_ty _Py_Bytes(bytes s, int lineno, int col_offset, PyArena *arena);\n  518: expr_ty _Py_NameConstant(singleton value, int lineno, int col_offset, PyArena\n  521: expr_ty _Py_Ellipsis(int lineno, int col_offset, PyArena *arena);\n  524:                       lineno, int col_offset, PyArena *arena);\n  527:                       lineno, int col_offset, PyArena *arena);\n  529: expr_ty _Py_Starred(expr_ty value, expr_context_ty ctx, int lineno, int\n  532: expr_ty _Py_Name(identifier id, expr_context_ty ctx, int lineno, int\n  535: expr_ty _Py_List(asdl_seq * elts, expr_context_ty ctx, int lineno, int\n  538: expr_ty _Py_Tuple(asdl_seq * elts, expr_context_ty ctx, int lineno, int\n  551:                                    body, int lineno, int col_offset, PyArena\n\n/root/maxcryptoblog/myvenv/include/python3.4m/code.h:\n   28:     int co_firstlineno;		/* first source line number */\n   29:     PyObject *co_lnotab;	/* string (encoding addr<->lineno mapping) See\n   87: PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno);\n  109:                                       PyObject *names, PyObject *lineno_obj);\n\n/root/maxcryptoblog/myvenv/include/python3.4m/compile.h:\n   19:     int ff_lineno;        /* line number of last future statement */\n\n/root/maxcryptoblog/myvenv/include/python3.4m/frameobject.h:\n   44:        directly.  As of 2.3 f_lineno is only valid when tracing is\n   48:     int f_lineno;               /* Current line number */\n\n/root/maxcryptoblog/myvenv/include/python3.4m/node.h:\n   13:     int			n_lineno;\n   21:                                       char *str, int lineno, int col_offset);\n   34: #define LINENO(n)       ((n)->n_lineno)\n\n/root/maxcryptoblog/myvenv/include/python3.4m/object.h:\n  706:                                             int lineno, PyObject *op);\n\n/root/maxcryptoblog/myvenv/include/python3.4m/parsetok.h:\n   16:     int lineno;\n\n/root/maxcryptoblog/myvenv/include/python3.4m/pyerrors.h:\n   24:     PyObject *lineno;\n  282: PyAPI_FUNC(void) _PyErr_BadInternalCall(const char *filename, int lineno);\n  328:     int lineno);\n  331:     int lineno,\n  336:     int lineno,\n  341:     int lineno);\n  345:     int lineno);\n\n/root/maxcryptoblog/myvenv/include/python3.4m/symtable.h:\n   59:     int ste_lineno;          /* first line of block */\n   61:     int ste_opt_lineno;      /* lineno of last exec or import * */\n\n/root/maxcryptoblog/myvenv/include/python3.4m/traceback.h:\n   19:     int tb_lineno;\n\n/root/maxcryptoblog/myvenv/include/python3.4m/warnings.h:\n   25:     int lineno,\n   33:     int lineno,\n   40:                          const char *filename, int lineno,\n\n/root/maxcryptoblog/myvenv/lib/python3.4/linecache.py:\n   14: def getline(filename, lineno, module_globals=None):\n   16:     if 1 <= lineno <= len(lines):\n   17:         return lines[lineno-1]\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site.py:\n  452:         lineno = 0\n  455:                 for i in range(lineno, lineno + self.MAXLINES):\n  460:                 lineno += self.MAXLINES\n\n/root/maxcryptoblog/myvenv/lib/python3.4/warnings.py:\n   10: def showwarning(message, category, filename, lineno, file=None, line=None):\n   18:         file.write(formatwarning(message, category, filename, lineno, line))\n   22: def formatwarning(message, category, filename, lineno, line=None):\n   25:     s =  \"%s:%s: %s: %s\\n\" % (filename, lineno, category.__name__, message)\n   26:     line = linecache.getline(filename, lineno) if line is None else line\n   32: def filterwarnings(action, message=\"\", category=Warning, module=\"\", lineno=0,\n   41:     'lineno' -- an integer line number, 0 matches all warnings\n   51:     assert isinstance(lineno, int) and lineno >= 0, \\\n   52:            \"lineno must be an int >= 0\"\n   54:             re.compile(module), lineno)\n   61: def simplefilter(action, category=Warning, lineno=0, append=False):\n   68:     'lineno' -- an integer line number, 0 matches all warnings\n   73:     assert isinstance(lineno, int) and lineno >= 0, \\\n   74:            \"lineno must be an int >= 0\"\n   75:     item = (action, None, category, None, lineno)\n  107:     action, message, category, module, lineno = [s.strip()\n  115:     if lineno:\n  117:             lineno = int(lineno)\n  118:             if lineno < 0:\n  121:             raise _OptionError(\"invalid lineno %r\" % (lineno,))\n  123:         lineno = 0\n  124:     filterwarnings(action, message, category, module, lineno)\n  178:         lineno = 1\n  181:         lineno = caller.f_lineno\n  201:     warn_explicit(message, category, filename, lineno, module, registry,\n  204: def warn_explicit(message, category, filename, lineno,\n  206:     lineno = int(lineno)\n  222:     key = (text, category, lineno)\n  232:             (ln == 0 or lineno == ln)):\n  274:     showwarning(message, category, filename, lineno)\n  281:     _WARNING_DETAILS = (\"message\", \"category\", \"filename\", \"lineno\", \"file\",\n  284:     def __init__(self, message, category, filename, lineno, file=None,\n  292:         return (\"{message : %r, category : %r, filename : %r, lineno : %s, \"\n  294:                                     self.filename, self.lineno, self.line))\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/contrib/admindocs/utils.py:\n  103:     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):\n  121: def default_reference_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/template/base.py:\n  221:         self.lineno = None\n  248:         self.lineno = 1\n  291:         token.lineno = self.lineno\n  292:         self.lineno += token_string.count('\\n')\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/test/html.py:\n  168:         if hasattr(position, 'lineno'):\n  169:             position = position.lineno, position.offset\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/utils/html_parser.py:\n   89:                 lineno, offset = self.getpos()\n   91:                     lineno = lineno + self.__starttag_text.count(\"\\n\")\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/utils/translation/trans_real.py:\n  567:     lineno_comment_map = {}\n  568:     comment_lineno_cache = None\n  581:                 for lineno, line in enumerate(content.splitlines(True)):\n  583:                         translators_comment_start = lineno\n  584:                 for lineno, line in enumerate(content.splitlines(True)):\n  585:                     if translators_comment_start is not None and lineno >= translators_comment_start:\n  635:                         \"%s (%sline %d)\" % (t.contents, filemsg, t.lineno)\n  652:             if comment_lineno_cache is not None:\n  653:                 cur_lineno = t.lineno + t.contents.count('\\n')\n  654:                 if comment_lineno_cache == cur_lineno:\n  656:                         for c in lineno_comment_map[comment_lineno_cache]:\n  662:                                 \"on the line.\") % (c, filemsg, comment_lineno_cache)\n  664:                         lineno_comment_map[comment_lineno_cache] = []\n  666:                     out.write('# %s' % ' | '.join(lineno_comment_map[comment_lineno_cache]))\n  667:                 comment_lineno_cache = None\n  727:                     lineno_comment_map.setdefault(t.lineno,\n  729:                     comment_lineno_cache = t.lineno\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/django/views/debug.py:\n  432:     def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, module_name=None):\n  434:         Returns context_lines before and after lineno from file.\n  435:         Returns (pre_context_lineno, pre_context, context_line, post_context).\n  468:         lower_bound = max(0, lineno - context_lines)\n  469:         upper_bound = lineno + context_lines\n  471:         pre_context = source[lower_bound:lineno]\n  472:         context_line = source[lineno]\n  473:         post_context = source[lineno + 1:upper_bound]\n  488:             lineno = tb.tb_lineno - 1\n  491:             pre_context_lineno, pre_context, context_line, post_context = self._get_lines_from_file(\n  492:                 filename, lineno, 7, loader, module_name,\n  494:             if pre_context_lineno is not None:\n  500:                     'lineno': lineno + 1,\n  506:                     'pre_context_lineno': pre_context_lineno + 1,\n  518:         tb = [(f['filename'], f['lineno'], f['function'], f['context_line']) for f in frames]\n  758:       <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>\n  843:                 <ol start=\"{{ frame.pre_context_lineno }}\" class=\"pre-context\" id=\"pre{{ frame.id }}\">\n  849:               <ol start=\"{{ frame.lineno }}\" class=\"context-line\">\n  853:                 <ol start='{{ frame.lineno|add:\"1\" }}' class=\"post-context\" id=\"post{{ frame.id }}\">\n  932: {% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}\n 1123: {% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line }}{% endif %}\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/gunicorn/debug.py:\n   28:             lineno = frame.f_lineno\n   35:                 line = linecache.getline(filename, lineno)\n   40:                     line = src[lineno]\n   45:                 print('%s:%s: %s' % (name, lineno, line.rstrip()))\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/c_lexer.py:\n   68:     def reset_lineno(self):\n   71:         self.lexer.lineno = 1\n   97:         return (token.lineno, self.find_tok_column(token))\n  281:             self.lexer.lineno = int(self.pp_line)\n  302:         t.lexer.lineno += 1\n  328:         t.lexer.lineno += t.value.count(\"\\n\")\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/c_parser.py:\n  140:         self.clex.reset_lineno()\n  552:             self._coord(p.lineno(1)))\n  565:                                        coord=self._coord(p.lineno(1)))],\n  725:         p[0] = c_ast.IdentifierType([p[1]], coord=self._coord(p.lineno(1)))\n  795:             coord=self._coord(p.lineno(2)))\n  804:             coord=self._coord(p.lineno(2)))\n  814:             coord=self._coord(p.lineno(2)))\n  909:         p[0] = c_ast.Enum(p[2], None, self._coord(p.lineno(1)))\n  914:         p[0] = c_ast.Enum(None, p[3], self._coord(p.lineno(1)))\n  920:         p[0] = c_ast.Enum(p[2], p[4], self._coord(p.lineno(1)))\n  942:                         self._coord(p.lineno(1)))\n  946:                         self._coord(p.lineno(1)))\n  972:             coord=self._coord(p.lineno(2)))\n  983:             coord=self._coord(p.lineno(1)))\n 1030:             dim=c_ast.ID(p[4], self._coord(p.lineno(4))),\n 1068:         coord = self._coord(p.lineno(1))\n 1105:             p[1].params.append(c_ast.EllipsisParam(self._coord(p.lineno(3))))\n 1125:                 coord=self._coord(p.lineno(1)))]\n 1136:                 coord=self._coord(p.lineno(1)))]\n 1155:                 coord=self._coord(p.lineno(2)))\n 1181:             p[0] = c_ast.InitList([], self._coord(p.lineno(1)))\n 1230:             coord=self._coord(p.lineno(2)))\n 1279:             coord=self._coord(p.lineno(1)))\n 1286:             dim=c_ast.ID(p[3], self._coord(p.lineno(3))),\n 1297:             dim=c_ast.ID(p[3], self._coord(p.lineno(3))),\n 1299:             coord=self._coord(p.lineno(1)))\n 1317:             coord=self._coord(p.lineno(1)))\n 1341:             coord=self._coord(p.lineno(1)))\n 1345:         p[0] = c_ast.Label(p[1], p[3], self._coord(p.lineno(1)))\n 1349:         p[0] = c_ast.Case(p[2], [p[4]], self._coord(p.lineno(1)))\n 1353:         p[0] = c_ast.Default([p[3]], self._coord(p.lineno(1)))\n 1357:         p[0] = c_ast.If(p[3], p[5], None, self._coord(p.lineno(1)))\n 1361:         p[0] = c_ast.If(p[3], p[5], p[7], self._coord(p.lineno(1)))\n 1366:                 c_ast.Switch(p[3], p[5], self._coord(p.lineno(1))))\n 1370:         p[0] = c_ast.While(p[3], p[5], self._coord(p.lineno(1)))\n 1374:         p[0] = c_ast.DoWhile(p[5], p[2], self._coord(p.lineno(1)))\n 1378:         p[0] = c_ast.For(p[3], p[5], p[7], p[9], self._coord(p.lineno(1)))\n 1382:         p[0] = c_ast.For(c_ast.DeclList(p[3], self._coord(p.lineno(1))),\n 1383:                          p[4], p[6], p[8], self._coord(p.lineno(1)))\n 1387:         p[0] = c_ast.Goto(p[2], self._coord(p.lineno(1)))\n 1391:         p[0] = c_ast.Break(self._coord(p.lineno(1)))\n 1395:         p[0] = c_ast.Continue(self._coord(p.lineno(1)))\n 1401:         p[0] = c_ast.Return(p[2] if len(p) == 4 else None, self._coord(p.lineno(1)))\n 1406:             p[0] = c_ast.EmptyStatement(self._coord(p.lineno(1)))\n 1425:         p[0] = c_ast.IdentifierType([p[1]], coord=self._coord(p.lineno(1)))\n 1501:         p[0] = c_ast.Cast(p[2], p[4], self._coord(p.lineno(1)))\n 1521:             self._coord(p.lineno(1)))\n 1553:         field = c_ast.ID(p[3], self._coord(p.lineno(3)))\n 1589:         coord = self._coord(p.lineno(1))\n 1606:         p[0] = c_ast.ID(p[1], self._coord(p.lineno(1)))\n 1615:             'int', p[1], self._coord(p.lineno(1)))\n 1622:             'float', p[1], self._coord(p.lineno(1)))\n 1629:             'char', p[1], self._coord(p.lineno(1)))\n 1642:                 'string', p[1], self._coord(p.lineno(1)))\n 1653:                 'string', p[1], self._coord(p.lineno(1)))\n 1679:                 self._coord(lineno=p.lineno,\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/plyparser.py:\n   48:     def _coord(self, lineno, column=None):\n   51:                 line=lineno,\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/ply/cpp.py:\n   26:     t.lexer.lineno += t.value.count(\"\\n\")\n   48:     t.lexer.lineno += t.value.count(\"\\n\")\n   54:     t.lexer.lineno += t.value.count(\"\\n\")\n   60:     t.lexer.lineno += t.value.count(\"\\n\")\n  274:         lex.lineno = 1\n  338:             self.error(self.source,tokenlist[0].lineno,\"Missing '(' in macro arguments\")\n  365:         self.error(self.source,tokenlist[-1].lineno,\"Missing ')' in macro arguments\")\n  485:                             e.lineno = t.lineno\n  496:                                 self.error(self.source,t.lineno,\"Macro %s requires %d arguments\" % (t.value,len(m.arglist)))\n  500:                                     self.error(self.source,t.lineno,\"Macro %s must have at least %d arguments\" % (t.value, len(m.arglist)-1))\n  502:                                     self.error(self.source,t.lineno,\"Macro %s must have at least %d argument\" % (t.value, len(m.arglist)-1))\n  516:                                     r.lineno = t.lineno\n  523:                     t.value = self.t_INTEGER_TYPE(t.lineno)\n  559:                         self.error(self.source,tokens[i].lineno,\"Malformed defined()\")\n  585:             self.error(self.source,tokens[0].lineno,\"Couldn't evaluate expression\")\n  687:                         self.error(self.source,dirtokens[0].lineno,\"Misplaced #elif\")\n  698:                         self.error(self.source,dirtokens[0].lineno,\"Misplaced #else\")\n  704:                         self.error(self.source,dirtokens[0].lineno,\"Misplaced #endif\")\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/ply/ctokens.py:\n  120:     t.lexer.lineno += t.value.count('\\n')\n  126:     t.lexer.lineno += 1\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/ply/lex.py:\n   71:         return \"LexToken(%s,%r,%d,%d)\" % (self.type,self.value,self.lineno,self.lexpos)\n  110: #    lineno           -  Current line number\n  138:         self.lineno = 1               # Current line number\n  325:                 tok.lineno = self.lineno\n  360:                             func_code(func).co_filename, func_code(func).co_firstlineno,\n  369:                     tok.lineno = self.lineno\n  379:                     tok.lineno = self.lineno\n  682:                     line = func_code(t).co_firstlineno\n  709:                 f.sort(lambda x,y: cmp(func_code(x[1]).co_firstlineno,func_code(y[1]).co_firstlineno))\n  712:                 f.sort(key=lambda x: func_code(x[1]).co_firstlineno)\n  730:                 line = func_code(f).co_firstlineno\n  800:                 line = func_code(f).co_firstlineno\n  934:             line = func_code(f).co_firstlineno\n 1038:         sys.stdout.write(\"(%s,%r,%d,%d)\\n\" % (tok.type, tok.value, tok.lineno,tok.lexpos))\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/pycparser/ply/yacc.py:\n  173: #        .lineno     = Starting line number\n  174: #        .endlineno  = Ending line number (optional, set automatically)\n  185: # The lineno() method returns the line number of a given\n  210:     def lineno(self,n):\n  211:         return getattr(self.slice[n],\"lineno\",0)\n  213:     def set_lineno(self,n,lineno):\n  214:         self.slice[n].lineno = lineno\n  217:         startline = getattr(self.slice[n],\"lineno\",0)\n  218:         endline = getattr(self.slice[n],\"endlineno\",startline)\n  402:                            sym.lineno = t1.lineno\n  405:                            sym.endlineno = getattr(t1,\"endlineno\",t1.lineno)\n  445:                            sym.lineno = lexer.lineno\n  531:                             if hasattr(errtoken,\"lineno\"): lineno = lookahead.lineno\n  532:                             else: lineno = 0\n  533:                             if lineno:\n  534:                                 sys.stderr.write(\"yacc: Syntax error at line %d, token=%s\\n\" % (lineno, errtoken.type))\n  573:                     if hasattr(lookahead,\"lineno\"):\n  574:                         t.lineno = lookahead.lineno\n  691:                            sym.lineno = t1.lineno\n  694:                            sym.endlineno = getattr(t1,\"endlineno\",t1.lineno)\n  731:                            sym.lineno = lexer.lineno\n  804:                             if hasattr(errtoken,\"lineno\"): lineno = lookahead.lineno\n  805:                             else: lineno = 0\n  806:                             if lineno:\n  807:                                 sys.stderr.write(\"yacc: Syntax error at line %d, token=%s\\n\" % (lineno, errtoken.type))\n  846:                     if hasattr(lookahead,\"lineno\"):\n  847:                         t.lineno = lookahead.lineno\n 1059:                             if hasattr(errtoken,\"lineno\"): lineno = lookahead.lineno\n 1060:                             else: lineno = 0\n 1061:                             if lineno:\n 1062:                                 sys.stderr.write(\"yacc: Syntax error at line %d, token=%s\\n\" % (lineno, errtoken.type))\n 1101:                     if hasattr(lookahead,\"lineno\"):\n 1102:                         t.lineno = lookahead.lineno\n 1144: #       lineno   - Line number where production function is defined\n 2880:             eline = func_code(self.error_func).co_firstlineno\n 2964:                 line = func_code(item).co_firstlineno\n 3024:                                          func_code(v).co_filename, func_code(v).co_firstlineno,n)\n\n/root/maxcryptoblog/myvenv/lib/python3.4/site-packages/setuptools/tests/doctest.py:\n  122: #    info about where the docstring came from (name, filename, lineno).\n  425:       - lineno: The line number within the DocTest string containing\n  439:     def __init__(self, source, want, exc_msg=None, lineno=0, indent=0,\n  451:         self.lineno = lineno\n  473:       - lineno: The line number within filename where this DocTest\n  481:     def __init__(self, examples, globs, name, filename, lineno, docstring):\n  493:         self.lineno = lineno\n  503:                 (self.name, self.filename, self.lineno, examples))\n  510:         return cmp((self.name, self.filename, self.lineno, id(self)),\n  511:                    (other.name, other.filename, other.lineno, id(other)))\n  580:         charno, lineno = 0, 0\n  585:             # Update lineno (lines before this example)\n  586:             lineno += string.count('\\n', charno, m.start())\n  589:                      self._parse_example(m, name, lineno)\n  593:                                     lineno=lineno,\n  596:             # Update lineno (lines inside this example)\n  597:             lineno += string.count('\\n', m.start(), m.end())\n  604:     def get_doctest(self, string, globs, name, filename, lineno):\n  609:         `globs`, `name`, `filename`, and `lineno` are attributes for\n  614:                        name, filename, lineno, string)\n  630:     def _parse_example(self, m, name, lineno):\n  638:         `name` is the string's name, and `lineno` is the line number\n  647:         self._check_prompt_blank(source_lines, indent, name, lineno)\n  648:         self._check_prefix(source_lines[1:], ' '*indent + '.', name, lineno)\n  659:                            lineno + len(source_lines))\n  670:         options = self._find_options(source, name, lineno)\n  684:     def _find_options(self, source, name, lineno):\n  689:         `name` is the string's name, and `lineno` is the line number\n  701:                                      (lineno+1, name, option))\n  707:                              (lineno, name, source))\n  722:     def _check_prompt_blank(self, lines, indent, name, lineno):\n  733:                                  (lineno+i+1, name,\n  736:     def _check_prefix(self, lines, prefix, name, lineno):\n  745:                                  (lineno+i+1, name, line))\n  839:         # DocTestFinder._find_lineno to find the line number for a\n  982:         lineno = self._find_lineno(obj, source_lines)\n  996:                                         filename, lineno)\n  998:     def _find_lineno(self, obj, source_lines):\n 1003:         lineno = None\n 1007:             lineno = 0\n 1019:                     lineno = i\n 1028:             lineno = getattr(obj, 'co_firstlineno', None)-1\n 1035:         if lineno is not None:\n 1037:                 return lineno+1\n 1039:             for lineno in range(lineno, len(source_lines)):\n 1040:                 if pat.match(source_lines[lineno]):\n 1041:                     return lineno\n 1183:             if test.lineno is not None and example.lineno is not None:\n 1184:                 lineno = test.lineno + example.lineno + 1\n 1186:                 lineno = '?'\n 1188:                        (test.filename, lineno, test.name))\n 1190:             out.append('Line %s, in %s' % (example.lineno+1, test.name))\n 2171:         if test.lineno is None:\n 2172:             lineno = 'unknown line number'\n 2174:             lineno = '%s' % test.lineno\n 2178:                 % (test.name, test.filename, lineno, lname, err)\n\n446 matches across 35 files\n",
			"settings":
			{
				"buffer_size": 28058,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "allauthdemo/utils.py",
			"settings":
			{
				"buffer_size": 1289,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"excl",
				"ToggleExclude: Conditional Patterns: Settings – User"
			],
			[
				"excll",
				"ToggleExclude: Conditional File / Folder Patterns: Disable"
			],
			[
				"toggle",
				"ToggleExclude: Conditional Patterns: Settings – User"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"markdown",
				"Markdown HTML Preview"
			],
			[
				"prev",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"fold",
				"Code Folding: Unfold All"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"lint",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"bla",
				"Package Control: Enable Package"
			],
			[
				"re",
				"Indentation: Reindent Lines"
			],
			[
				"",
				"Set Syntax: XML"
			],
			[
				"Del",
				"Package Control: Advanced Install Package"
			],
			[
				"in",
				"Indentation: Reindent Lines"
			],
			[
				"s",
				"Sort Lines"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 153.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/root/maxcryptoblog/maxcryptoblog.sublime-project",
		"/root/maxcryptoblog/maxcryptoblog.sublime-workspace",
		"/root/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/root/django-gtd/django-gtd.sublime-project",
		"/root/gtdzen/setup.py",
		"/root/gtdzen/gtdzen/models.py",
		"/root/gtdzen/gtdzen/__init__.py",
		"/root/gtdzen/gtdzen.sublime-workspace",
		"/root/video-embed/mysite/settings.py",
		"/root/video-embed/example_project/settings.py",
		"/root/django-embed-video/example_project/embed_video/settings.py",
		"/root/maxcryptoblog/templates/admin/index.html",
		"/root/maxcryptoblog/blog/templates/blog/post_new.html",
		"/root/maxcryptoblog/blog/templates/blog/post_detail.html",
		"/root/maxcryptoblog/blog/templates/blog/post_decrypt.html",
		"/root/maxcryptoblog/blog/templates/blog/add_comment_to_post.html",
		"/root/maxcryptoblog/blog/templates/blog/about.html",
		"/root/maxcryptoblog/allauthdemo/templates/visitor/terms.html",
		"/root/maxcryptoblog/allauthdemo/templates/visitor/landing-index.html",
		"/root/maxcryptoblog/allauthdemo/templates/visitor/landing-about.html",
		"/root/maxcryptoblog/allauthdemo/templates/visitor/contact.html",
		"/root/maxcryptoblog/allauthdemo/templates/member/member-index.html",
		"/root/maxcryptoblog/allauthdemo/templates/member/member-action.html",
		"/root/maxcryptoblog/allauthdemo/templates/auth/profile.html",
		"/root/maxcryptoblog/allauthdemo/templates/allauth/account/email_confirm.html",
		"/root/maxcryptoblog/allauthdemo/templates/allauth/account/base.html",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap-visitor.html",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap-jquery.html",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap.html",
		"/root/maxcryptoblog/allauthdemo/settings_cryptoblog.py",
		"/root/maxcryptoblog/allauthdemo/settings.py",
		"/root/maxcryptoblog/blog/templates/blog/base.html",
		"/root/maxcryptoblog/allauthdemo/settings_local.py.txt",
		"/root/maxcryptoblog/allauthdemo/settings_generated_max.py",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap-member.html",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap-minimal.html",
		"/root/maxcryptoblog/allauthdemo/urls.py",
		"/root/maxcryptoblog/allauthdemo/templates/allauth/account/email.html",
		"/root/maxcryptoblog/allauthdemo/templates/bases/bootstrap-auth.html",
		"/root/maxcryptoblog/allauthdemo/settings_local.py",
		"/root/maxcryptoblog/blog/encryption.py",
		"/root/maxcryptoblog/allauthdemo/settings_email.py",
		"/root/maxcryptoblog/allauthdemo/settings_verification.py",
		"/root/maxcryptoblog/allauthdemo/utils.py",
		"/root/maxcryptoblog/.gitignore",
		"/root/maxcryptoblog/allauthdemo/settings_secret.py",
		"/root/maxcryptoblog/allauthdemo/settings_misc.py",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/member/member-index.bak.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/bases/bootstrap.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/demo/admin.py",
		"/usr/local/share/workspace/maxcryptoblog/blog/admin.py",
		"/usr/local/share/workspace/maxcryptoblog/blog/static/css/zian.css",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/about.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/base.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/post_detail.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/bases/bootstrap-visitor.html",
		"/usr/local/share/workspace/maxcryptoblog/max_configure.py",
		"/usr/local/share/workspace/maxcryptoblog/seed.sql",
		"/usr/local/share/workspace/maxcryptoblog/max_seed.sql",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/settings_generated.py",
		"/usr/local/share/workspace/maxcryptoblog/Makefile",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/auth/admin.py",
		"/usr/local/share/workspace/maxcryptoblog/configure.py",
		"/usr/local/share/workspace/maxcryptoblog/blog/encryption.py",
		"/usr/local/share/workspace/maxcryptoblog/requirements.txt",
		"/usr/local/share/workspace/maxcryptoblog/templates/admin/index.html",
		"/usr/local/share/workspace/maxcryptoblog/templates/admin/base_site.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/messedupbase.html",
		"/usr/local/share/workspace/maxcryptoblog/requirements-pythonanywhere.txt",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/bases/bootstrap-minimal.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/bases/bootstrap-member.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/static/css/blog.css",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/post_draft_list.html",
		"/usr/local/share/workspace/maxcryptoblog/.gitignore",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/visitor/landing-index.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/bases/bootstrap-jquery.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/post_list.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/registration/login.html",
		"/usr/local/share/workspace/maxcryptoblog/blog/urls.py",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/utils.py",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/urls.py",
		"/usr/local/share/workspace/maxcryptoblog/blog/templates/blog/post_new.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/auth/models.py",
		"/usr/local/share/workspace/maxcryptoblog/blog/models.py",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/allauth/socialaccount/connections.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/copyright.html",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/templates/member/member-index.html",
		"/usr/local/share/workspace/maxcryptoblog/README.md",
		"/usr/local/share/workspace/maxcryptoblog/static/css/zian.css",
		"/usr/local/share/workspace/maxcryptoblog/allauthdemo/settings_email.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/urls.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/auth/views.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/views.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/allauth/account/base.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/allauth/account/email_confirm.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/allauth/account/email.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/settings_generated.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/allauth/socialaccount/signup.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/context_processors.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/base.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_edit.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_encrypt.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/messedupbase.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/static/css/blog.css",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/allauth/account/logout.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/bases/bootstrap-auth.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/bases/bootstrap-minimal.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/visitor/landing-index.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/bases/bootstrap-visitor.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_draft_list.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_detail.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/add_comment_to_post.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_decrypt.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_new.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/bases/bootstrap.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/bases/bootstrap-member.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/about.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/settings_cryptoblog.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/views.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/templates/blog/post_list.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/static/css/zian.css",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/settings.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/settings.template.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/settings_misc.py",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/configure.py~",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/.gitignore",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/allauthdemo/templates/member/member-index.html",
		"/usr/local/share/workspace/cryptoblog-allauth-bootstrap/blog/static/css/lobster.css"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"*",
			"*,-*.js,-*.map",
			"*,-*.js,-*.map,-*.css",
			"*,-*.js,-*.map",
			"*,-*.js,-*.css,-*.map",
			"*,-*.js,-*.css",
			"*,-*.js",
			"*",
			"*.md",
			"*.py",
			"<open folders>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"lineno",
			"mysql_config",
			"mysql",
			"mysql_config",
			"utils",
			"bootstrap3",
			"\"container\"",
			"block",
			"block content",
			"jumbo",
			"container",
			"netdna",
			"font-awesome",
			"netdna",
			"app_js",
			"btn-",
			"default",
			"<i",
			"comment author",
			"Edit",
			"Verify",
			"contents",
			"utils",
			"lineno",
			"DEBUG",
			"STATICFILES_DIRS",
			"ALLOWED_HOSTS",
			"block",
			"block nav",
			"h1",
			"dropdown-toggle",
			"-home",
			"glyph",
			"Welcome",
			"top-menu",
			"question-sign",
			"question",
			"glyphicon",
			"IE",
			"Terms",
			"domain",
			"domain.name",
			"SITE_ID",
			"allauthdemo",
			"django_site",
			"SITE_ID",
			"example.com",
			"John's",
			"mysite",
			"glyphicon-home",
			"Home",
			"hOME",
			"APP_TITLE",
			"user:",
			"app_title",
			"Home",
			"APP_TITLE|lower",
			"post_list",
			"username",
			"post.author",
			"bootstrap-jquery",
			"tail_js",
			"block footer",
			"<footer>",
			"3rd",
			"2015",
			"APP_TITLE|lower",
			"APP_TITLE",
			"APP_NAME",
			"max cryptoblog",
			"alpha<",
			"alpha",
			"django.contrib.auth.views.login",
			"login",
			"woff",
			"dj_database",
			"dj-database-",
			"APP_TITLE",
			"current_site",
			"sites.models",
			"site",
			"site_name",
			"Verify",
			"finalize",
			"important",
			"logout",
			"<h1",
			"<h1>",
			"Max Cryptoblog",
			"processor",
			"settings",
			"Published Posts",
			"Max Cryptoblog",
			"static",
			"static_",
			"static",
			"atyp",
			"navbar-brand",
			"Cryptoblog",
			"google",
			"lobster.css",
			"lobster",
			"font",
			"authenticated",
			"<title>",
			"True Cryptoblog",
			"Cryptoblog",
			"lobster",
			"lobster.css",
			"import settings",
			"settings",
			"login",
			"urls",
			"login",
			"logout",
			"landing_about",
			"about",
			"Home",
			"fonts",
			"UpdateView",
			"name",
			"user",
			"request",
			"logout",
			"user_model",
			"This =",
			"navbar-brand",
			"trans"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\n",
			"s.",
			"",
			" "
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"settings":
					{
						"buffer_size": 28058,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										123,
										129
									],
									[
										254,
										260
									],
									[
										367,
										373
									],
									[
										471,
										477
									],
									[
										638,
										644
									],
									[
										754,
										760
									],
									[
										827,
										833
									],
									[
										887,
										893
									],
									[
										946,
										952
									],
									[
										1006,
										1012
									],
									[
										1034,
										1040
									],
									[
										1135,
										1141
									],
									[
										1228,
										1234
									],
									[
										1278,
										1284
									],
									[
										1348,
										1354
									],
									[
										1449,
										1455
									],
									[
										1542,
										1548
									],
									[
										1599,
										1605
									],
									[
										1642,
										1648
									],
									[
										1719,
										1725
									],
									[
										1774,
										1780
									],
									[
										1867,
										1873
									],
									[
										1888,
										1894
									],
									[
										1994,
										2000
									],
									[
										2018,
										2024
									],
									[
										2081,
										2087
									],
									[
										2144,
										2150
									],
									[
										2203,
										2209
									],
									[
										2266,
										2272
									],
									[
										2388,
										2394
									],
									[
										2411,
										2417
									],
									[
										2434,
										2440
									],
									[
										2457,
										2463
									],
									[
										2544,
										2550
									],
									[
										2611,
										2617
									],
									[
										2680,
										2686
									],
									[
										2771,
										2777
									],
									[
										2868,
										2874
									],
									[
										2909,
										2915
									],
									[
										2985,
										2991
									],
									[
										3105,
										3111
									],
									[
										3189,
										3195
									],
									[
										3260,
										3266
									],
									[
										3341,
										3347
									],
									[
										3414,
										3420
									],
									[
										3503,
										3509
									],
									[
										3575,
										3581
									],
									[
										3637,
										3643
									],
									[
										3726,
										3732
									],
									[
										3808,
										3814
									],
									[
										3883,
										3889
									],
									[
										3952,
										3958
									],
									[
										4022,
										4028
									],
									[
										4095,
										4101
									],
									[
										4199,
										4205
									],
									[
										4297,
										4303
									],
									[
										4372,
										4378
									],
									[
										4459,
										4465
									],
									[
										4556,
										4562
									],
									[
										4632,
										4638
									],
									[
										4688,
										4694
									],
									[
										4797,
										4803
									],
									[
										4876,
										4882
									],
									[
										4916,
										4922
									],
									[
										5029,
										5035
									],
									[
										5085,
										5091
									],
									[
										5174,
										5180
									],
									[
										5237,
										5243
									],
									[
										5332,
										5338
									],
									[
										5401,
										5407
									],
									[
										5479,
										5485
									],
									[
										5558,
										5564
									],
									[
										5652,
										5658
									],
									[
										5716,
										5722
									],
									[
										5786,
										5792
									],
									[
										5856,
										5862
									],
									[
										5964,
										5970
									],
									[
										6040,
										6046
									],
									[
										6118,
										6124
									],
									[
										6197,
										6203
									],
									[
										6261,
										6267
									],
									[
										6371,
										6377
									],
									[
										6470,
										6476
									],
									[
										6566,
										6572
									],
									[
										6647,
										6653
									],
									[
										6736,
										6742
									],
									[
										6893,
										6899
									],
									[
										6947,
										6953
									],
									[
										7069,
										7075
									],
									[
										7137,
										7143
									],
									[
										7201,
										7207
									],
									[
										7321,
										7327
									],
									[
										7418,
										7424
									],
									[
										7506,
										7512
									],
									[
										7587,
										7593
									],
									[
										7611,
										7617
									],
									[
										7635,
										7641
									],
									[
										7658,
										7664
									],
									[
										7681,
										7687
									],
									[
										7705,
										7711
									],
									[
										7792,
										7798
									],
									[
										7858,
										7864
									],
									[
										7874,
										7880
									],
									[
										7987,
										7993
									],
									[
										8069,
										8075
									],
									[
										8092,
										8098
									],
									[
										8158,
										8164
									],
									[
										8251,
										8257
									],
									[
										8300,
										8306
									],
									[
										8350,
										8356
									],
									[
										8426,
										8432
									],
									[
										8475,
										8481
									],
									[
										8483,
										8489
									],
									[
										8531,
										8537
									],
									[
										8662,
										8668
									],
									[
										8762,
										8768
									],
									[
										8831,
										8837
									],
									[
										8898,
										8904
									],
									[
										8980,
										8986
									],
									[
										9089,
										9095
									],
									[
										9111,
										9117
									],
									[
										9198,
										9204
									],
									[
										9215,
										9221
									],
									[
										9249,
										9255
									],
									[
										9316,
										9322
									],
									[
										9374,
										9380
									],
									[
										9411,
										9417
									],
									[
										9498,
										9504
									],
									[
										9515,
										9521
									],
									[
										9549,
										9555
									],
									[
										9626,
										9632
									],
									[
										9680,
										9686
									],
									[
										9714,
										9720
									],
									[
										9741,
										9747
									],
									[
										9754,
										9760
									],
									[
										9784,
										9790
									],
									[
										9843,
										9849
									],
									[
										9857,
										9863
									],
									[
										9882,
										9888
									],
									[
										9954,
										9960
									],
									[
										9977,
										9983
									],
									[
										10003,
										10009
									],
									[
										10021,
										10027
									],
									[
										10082,
										10088
									],
									[
										10162,
										10168
									],
									[
										10181,
										10187
									],
									[
										10194,
										10200
									],
									[
										10236,
										10242
									],
									[
										10275,
										10281
									],
									[
										10343,
										10349
									],
									[
										10418,
										10424
									],
									[
										10494,
										10500
									],
									[
										10582,
										10588
									],
									[
										10660,
										10666
									],
									[
										10813,
										10819
									],
									[
										10914,
										10920
									],
									[
										11061,
										11067
									],
									[
										11095,
										11101
									],
									[
										11127,
										11133
									],
									[
										11141,
										11147
									],
									[
										11168,
										11174
									],
									[
										11317,
										11323
									],
									[
										11366,
										11372
									],
									[
										11498,
										11504
									],
									[
										11556,
										11562
									],
									[
										11565,
										11571
									],
									[
										11714,
										11720
									],
									[
										11757,
										11763
									],
									[
										11804,
										11810
									],
									[
										11916,
										11922
									],
									[
										11950,
										11956
									],
									[
										12075,
										12081
									],
									[
										12186,
										12192
									],
									[
										12224,
										12230
									],
									[
										12277,
										12283
									],
									[
										12288,
										12294
									],
									[
										12354,
										12360
									],
									[
										12374,
										12380
									],
									[
										12422,
										12428
									],
									[
										12449,
										12455
									],
									[
										12542,
										12548
									],
									[
										12587,
										12593
									],
									[
										12614,
										12620
									],
									[
										12690,
										12696
									],
									[
										12717,
										12723
									],
									[
										12764,
										12770
									],
									[
										12811,
										12817
									],
									[
										12843,
										12849
									],
									[
										12886,
										12892
									],
									[
										12903,
										12909
									],
									[
										13041,
										13047
									],
									[
										13150,
										13156
									],
									[
										13204,
										13210
									],
									[
										13290,
										13296
									],
									[
										13343,
										13349
									],
									[
										13414,
										13420
									],
									[
										13459,
										13465
									],
									[
										13504,
										13510
									],
									[
										13547,
										13553
									],
									[
										13562,
										13568
									],
									[
										13604,
										13610
									],
									[
										13714,
										13720
									],
									[
										13780,
										13786
									],
									[
										13828,
										13834
									],
									[
										13837,
										13843
									],
									[
										13889,
										13895
									],
									[
										13910,
										13916
									],
									[
										13962,
										13968
									],
									[
										14126,
										14132
									],
									[
										14196,
										14202
									],
									[
										14292,
										14298
									],
									[
										14368,
										14374
									],
									[
										14478,
										14484
									],
									[
										14577,
										14583
									],
									[
										14718,
										14724
									],
									[
										14735,
										14741
									],
									[
										14800,
										14806
									],
									[
										14846,
										14852
									],
									[
										14904,
										14910
									],
									[
										15027,
										15033
									],
									[
										15067,
										15073
									],
									[
										15107,
										15113
									],
									[
										15174,
										15180
									],
									[
										15224,
										15230
									],
									[
										15259,
										15265
									],
									[
										15399,
										15405
									],
									[
										15441,
										15447
									],
									[
										15519,
										15525
									],
									[
										15604,
										15610
									],
									[
										15655,
										15661
									],
									[
										15706,
										15712
									],
									[
										15757,
										15763
									],
									[
										15828,
										15834
									],
									[
										15899,
										15905
									],
									[
										15970,
										15976
									],
									[
										16027,
										16033
									],
									[
										16084,
										16090
									],
									[
										16135,
										16141
									],
									[
										16186,
										16192
									],
									[
										16250,
										16256
									],
									[
										16300,
										16306
									],
									[
										16383,
										16389
									],
									[
										16439,
										16445
									],
									[
										16495,
										16501
									],
									[
										16551,
										16557
									],
									[
										16622,
										16628
									],
									[
										16673,
										16679
									],
									[
										16724,
										16730
									],
									[
										16788,
										16794
									],
									[
										16853,
										16859
									],
									[
										16905,
										16911
									],
									[
										16956,
										16962
									],
									[
										17007,
										17013
									],
									[
										17079,
										17085
									],
									[
										17152,
										17158
									],
									[
										17222,
										17228
									],
									[
										17297,
										17303
									],
									[
										17372,
										17378
									],
									[
										17446,
										17452
									],
									[
										17519,
										17525
									],
									[
										17593,
										17599
									],
									[
										17675,
										17681
									],
									[
										17754,
										17760
									],
									[
										17831,
										17837
									],
									[
										17896,
										17902
									],
									[
										17956,
										17962
									],
									[
										18019,
										18025
									],
									[
										18111,
										18117
									],
									[
										18184,
										18190
									],
									[
										18267,
										18273
									],
									[
										18338,
										18344
									],
									[
										18383,
										18389
									],
									[
										18447,
										18453
									],
									[
										18496,
										18502
									],
									[
										18558,
										18564
									],
									[
										18616,
										18622
									],
									[
										18676,
										18682
									],
									[
										18735,
										18741
									],
									[
										18800,
										18806
									],
									[
										18865,
										18871
									],
									[
										18912,
										18918
									],
									[
										18921,
										18927
									],
									[
										19037,
										19043
									],
									[
										19087,
										19093
									],
									[
										19192,
										19198
									],
									[
										19241,
										19247
									],
									[
										19290,
										19296
									],
									[
										19339,
										19345
									],
									[
										19388,
										19394
									],
									[
										19454,
										19460
									],
									[
										19547,
										19553
									],
									[
										19625,
										19631
									],
									[
										19636,
										19642
									],
									[
										19707,
										19713
									],
									[
										19843,
										19849
									],
									[
										19992,
										19998
									],
									[
										20117,
										20123
									],
									[
										20128,
										20134
									],
									[
										20194,
										20200
									],
									[
										20266,
										20272
									],
									[
										20348,
										20354
									],
									[
										20454,
										20460
									],
									[
										20547,
										20553
									],
									[
										20640,
										20646
									],
									[
										20768,
										20774
									],
									[
										20817,
										20823
									],
									[
										20982,
										20988
									],
									[
										21014,
										21020
									],
									[
										21074,
										21080
									],
									[
										21148,
										21154
									],
									[
										21162,
										21168
									],
									[
										21257,
										21263
									],
									[
										21296,
										21302
									],
									[
										21310,
										21316
									],
									[
										21348,
										21354
									],
									[
										21362,
										21368
									],
									[
										21424,
										21430
									],
									[
										21501,
										21507
									],
									[
										21532,
										21538
									],
									[
										21609,
										21615
									],
									[
										21668,
										21674
									],
									[
										21726,
										21732
									],
									[
										21780,
										21786
									],
									[
										21865,
										21871
									],
									[
										21981,
										21987
									],
									[
										22035,
										22041
									],
									[
										22107,
										22113
									],
									[
										22173,
										22179
									],
									[
										22234,
										22240
									],
									[
										22264,
										22270
									],
									[
										22278,
										22284
									],
									[
										22316,
										22322
									],
									[
										22325,
										22331
									],
									[
										22382,
										22388
									],
									[
										22444,
										22450
									],
									[
										22501,
										22507
									],
									[
										22513,
										22519
									],
									[
										22561,
										22567
									],
									[
										22585,
										22591
									],
									[
										22596,
										22602
									],
									[
										22642,
										22648
									],
									[
										22657,
										22663
									],
									[
										22720,
										22726
									],
									[
										22730,
										22736
									],
									[
										22749,
										22755
									],
									[
										22797,
										22803
									],
									[
										22846,
										22852
									],
									[
										22957,
										22963
									],
									[
										23030,
										23036
									],
									[
										23073,
										23079
									],
									[
										23092,
										23098
									],
									[
										23137,
										23143
									],
									[
										23149,
										23155
									],
									[
										23197,
										23203
									],
									[
										23221,
										23227
									],
									[
										23232,
										23238
									],
									[
										23278,
										23284
									],
									[
										23293,
										23299
									],
									[
										23356,
										23362
									],
									[
										23366,
										23372
									],
									[
										23385,
										23391
									],
									[
										23433,
										23439
									],
									[
										23482,
										23488
									],
									[
										23593,
										23599
									],
									[
										23666,
										23672
									],
									[
										23709,
										23715
									],
									[
										23728,
										23734
									],
									[
										23791,
										23797
									],
									[
										23801,
										23807
									],
									[
										23820,
										23826
									],
									[
										23868,
										23874
									],
									[
										23917,
										23923
									],
									[
										24028,
										24034
									],
									[
										24101,
										24107
									],
									[
										24144,
										24150
									],
									[
										24163,
										24169
									],
									[
										24185,
										24191
									],
									[
										24307,
										24313
									],
									[
										24368,
										24374
									],
									[
										24470,
										24476
									],
									[
										24635,
										24641
									],
									[
										24659,
										24665
									],
									[
										24778,
										24784
									],
									[
										24818,
										24824
									],
									[
										24827,
										24833
									],
									[
										24849,
										24855
									],
									[
										24971,
										24977
									],
									[
										25011,
										25017
									],
									[
										25020,
										25026
									],
									[
										25082,
										25088
									],
									[
										25159,
										25165
									],
									[
										25239,
										25245
									],
									[
										25282,
										25288
									],
									[
										25324,
										25330
									],
									[
										25378,
										25384
									],
									[
										25483,
										25489
									],
									[
										25534,
										25540
									],
									[
										25541,
										25547
									],
									[
										25577,
										25583
									],
									[
										25631,
										25637
									],
									[
										25744,
										25750
									],
									[
										25802,
										25808
									],
									[
										25875,
										25881
									],
									[
										25936,
										25942
									],
									[
										25994,
										26000
									],
									[
										26089,
										26095
									],
									[
										26173,
										26179
									],
									[
										26215,
										26221
									],
									[
										26301,
										26307
									],
									[
										26358,
										26364
									],
									[
										26416,
										26422
									],
									[
										26488,
										26494
									],
									[
										26550,
										26556
									],
									[
										26635,
										26641
									],
									[
										26685,
										26691
									],
									[
										26759,
										26765
									],
									[
										26809,
										26815
									],
									[
										26871,
										26877
									],
									[
										26923,
										26929
									],
									[
										26943,
										26949
									],
									[
										27026,
										27032
									],
									[
										27055,
										27061
									],
									[
										27103,
										27109
									],
									[
										27136,
										27142
									],
									[
										27174,
										27180
									],
									[
										27204,
										27210
									],
									[
										27235,
										27241
									],
									[
										27270,
										27276
									],
									[
										27320,
										27326
									],
									[
										27352,
										27358
									],
									[
										27368,
										27374
									],
									[
										27445,
										27451
									],
									[
										27489,
										27495
									],
									[
										27523,
										27529
									],
									[
										27554,
										27560
									],
									[
										27597,
										27603
									],
									[
										27611,
										27617
									],
									[
										27628,
										27634
									],
									[
										27662,
										27668
									],
									[
										27721,
										27727
									],
									[
										27799,
										27805
									],
									[
										27844,
										27850
									],
									[
										27879,
										27885
									],
									[
										27929,
										27935
									],
									[
										27950,
										27956
									],
									[
										28009,
										28015
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								831,
								831
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "allauthdemo/utils.py",
					"settings":
					{
						"buffer_size": 1289,
						"regions":
						{
						},
						"selection":
						[
							[
								1289,
								1289
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 88.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true
}
